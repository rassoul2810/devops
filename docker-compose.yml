version: '3.8'

services:
  redis:
    image: redis:alpine
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  vote:
    build:
      context: ./vote
    ports:
      - "${VOTE_PORT}:80"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - OPTION_A=${OPTION_A}
      - OPTION_B=${OPTION_B}
    networks:
      - backend

  result:
    build:
      context: ./result
    ports:
      - "${RESULT_PORT}:4000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - PORT=4000
    networks:
      - backend

  worker:
    build:
      context: ./worker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend

  jenkins:  # ✅ déplacé dans services:
    image: jenkins/jenkins:lts
    user: root
    ports:
      - "${JENKINS_PORT}:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose
    networks:
      - backend

volumes:
  postgres_data:
  jenkins_home:

networks:
  backend:

